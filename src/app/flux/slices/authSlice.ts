import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../store";

export const authenticate = (): User => {
  let user: User = {
    authenticated: true,
    id: 0,
    notifications: [],
    info: {
      profileImg:
        "https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fmedia2.s-nbcnews.com%2Fi%2Fstreams%2F2014%2FOctober%2F141022%2F1D274907053597-141022_today-pets-dog-tease-ae.jpg&f=1&nofb=1",
      tag: "Infamous",
      rank: 3,
    },
  };
  // User loading logic; make fetch request to serverURL
  // (must specify the endpoint though), store results
  // in user var, call the below functions & make sure to
  // remove the setTimeout; it is only present to simulate
  // the delay generated by a server request!
  return user;
};

export interface UserInfo {
  profileImg: string;
  tag: string;
  rank: number;
}

export interface Notification {
  author: UserInfo;
  message: string;
  to: string;
  new: boolean;
}

export interface User {
  authenticated: boolean;
  id: number;
  notifications: Notification[];
  info: UserInfo;
}
//  Note: the permissions integer stored in the front-end
// is only meant to be used for soft-locking the user;
// even if they somehow access a restricted section
// of the site, the components should make a request
// with their id & back-end will verify it, preventing
// any trickery. The same idea applies to any api requests

interface AuthState {
  loaded: boolean;
  user: User;
}

export const initialState: AuthState = {
  loaded: false,
  user: {
    authenticated: false,
    id: 0,
    notifications: [],
    info: {
      profileImg: "",
      tag: "",
      rank: -1,
    },
  },
};

export const authSlice = createSlice({
  name: "authenticated",
  initialState,
  reducers: {
    finishedLoading: (state) => {
      state.loaded = true;
    },
    loadUser: {
      reducer(state, action: PayloadAction<User>) {
        state.user = action.payload;
      },
      prepare(payload: User) {
        return { payload };
      },
    },
    viewNotifications: (state) => {
      state.user.notifications = state.user.notifications.map(
        (notification) => {
          return Object.assign(notification, {
            new: false,
          });
        }
      );
    },
  },
});

export const {
  finishedLoading,
  loadUser,
  viewNotifications,
} = authSlice.actions;

export const selectAuthSlice = (state: RootState) => state.authentication;

export const selectUser = (state: RootState) => state.authentication.user;

export const selectUserRank = (state: RootState) =>
  state.authentication.user.info.rank;

export default authSlice.reducer;
