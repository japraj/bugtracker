import React from "react";
import { useSelector, useDispatch } from "react-redux";
import {
  User,
  initialState,
  selectAuthSlice,
  finishedLoading,
  loadUser,
} from "./flux/auth/authSlice";
import { hot } from "react-hot-loader/root";
import FancyLoading from "../components/misc/loadingRing/FancyLoading";

import Navigation from "../components/global/navigation/NavigationWrapper";
import { selectSideNavWidth } from "../components/global/navigation/navigationSlice";

import { Router, Route, Redirect, Switch } from "react-router-dom";
import history from "./history";
import GenericRoute from "../routes/GenericRoute";
import Home from "../routes/home/Home";
import ErrorPage from "../routes/errorPage/ErrorPage";
import Login from "../routes/login/Login";
import Register from "../routes/register/Register";

import styled from "styled-components";

import "@fortawesome/fontawesome-free/css/all.min.css";
import "./App.css";
import "../components/misc/alert/Alert.css";

const Context = React.createContext(initialState);
// const serverURL: string = "localhost:5000";

const App = () => {
  const dispatch = useDispatch();
  React.useEffect(() => {
    let user: User = {
      authenticated: true,
      id: 0,
      notifications: [""],
      info: {
        profileImg:
          "https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fmedia2.s-nbcnews.com%2Fi%2Fstreams%2F2014%2FOctober%2F141022%2F1D274907053597-141022_today-pets-dog-tease-ae.jpg&f=1&nofb=1",
        tag: "Infamous",
        rank: 3,
      },
    };
    // User loading logic; make fetch request to serverURL
    // (must specify the endpoint though), store results
    // in user var, call the below functions & make sure to
    // remove the setTimeout; it is only present to simulate
    // the delay generated by a server request!

    setTimeout(() => {
      dispatch(finishedLoading());
      dispatch(loadUser(user));
    }, 2000);
  }, [dispatch]);

  const authSlice = useSelector(selectAuthSlice);
  const authenticated = authSlice.user.authenticated;
  const sideNavWidth = useSelector(selectSideNavWidth);
  return (
    <Context.Provider value={authSlice}>
      {authSlice.loaded ? (
        <div id="App">
          <Router history={history}>
            {/*
            Navigation is a persistent component, present in all pages, so it is kept
            outside the ContentWrapper (which is just a styled main). Note that
            Navigation must be within the Router component because it uses a
            location hook
          */}
            <Navigation authenticated={authSlice.user.authenticated} />
            <ContentWrapper {...{ sideNavWidth }}>
              <Switch>
                <Route path="/" exact={true} render={() => <Home />} />
                <Route path="/login" render={() => <Login />} />
                <Route path="/register" render={() => <Register />} />
                <ProtectedRoute
                  authenticated={authenticated}
                  path="/dashboard"
                  component={<GenericRoute name="Dashboard" />}
                />
                <ProtectedRoute
                  authenticated={authenticated}
                  path="/create"
                  component={<GenericRoute name="Create" />}
                />
                <Route
                  path="/loginRequired"
                  render={() => (
                    <ErrorPage
                      width="660px"
                      header="Auth Error"
                      bodyText="Sorry, you must be logged in to view that page. "
                      linkText="Go to Login Page."
                      linkHref="/login"
                    />
                  )}
                />
                {/* 
                  This route is special in that if no
                  other route is matched, the user is 
                  automatically redirected here.
                */}
                <Route
                  render={() => (
                    <ErrorPage
                      width="660px"
                      header="404 Error"
                      bodyText="Sorry, that page doesn't exist. "
                      linkText="Go to Home Page."
                      linkHref="/"
                    />
                  )}
                />
              </Switch>
            </ContentWrapper>
          </Router>
        </div>
      ) : (
        <div id="loading">
          <FancyLoading />
        </div>
      )}
    </Context.Provider>
  );
};

// Note: the left margin becomes 0 for
// screens below 1215px because the
// collapsed sidenav disappears at
// those screens (takes up too much
// space)
//
// Padding-bottom is present on mobile
// because of the special bottom nav
const ContentWrapper = styled.main`
  padding: 2rem 40px 8px 40px;
  margin: var(--nav-height) 0 0
    ${(props: { sideNavWidth: number }) => props.sideNavWidth}px;
  height: 100%;

  @media (max-width: 1215px) and (min-width: 1101px) {
    margin-left: 0;
    padding: 1rem;
  }

  @media (max-width: 1100px) {
    margin-left: 0;
    padding: 1rem 0;
  }

  @media (max-width: 600px) {
    padding-bottom: calc(var(--mobile-nav-height) + 1rem);
  }
`;

// A protected route is one which can only be accessed by authenticated users.
// If an unauthenticated user tries to access one of these, they are redirected
// to the /loginRequired page.
const ProtectedRoute = ({
  authenticated,
  component,
  path,
}: {
  authenticated: boolean;
  component: React.ReactNode;
  path: any;
}) => {
  return (
    <Route
      path={path}
      render={(props) => {
        return authenticated ? (
          component
        ) : (
          <Redirect to={{ pathname: "/loginRequired" }} />
        );
      }}
    />
  );
};

export default hot(App);
